---
# Preamble

## Author
author:
  name: Верниковская Екатерина Андреевна
  degrees: DSc
  orcid: 0000-0002-0877-7063
  email: kulyabov-ds@rudn.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6
## Title
title: "Отчёт по лабораторной работе №3"
subtitle: "Дисциплина: Сетевые технологии"
license: "CC BY"
## Generic options
lang: ru-RU
number-sections: true
toc: true
toc-title: "Содержание"
toc-depth: 2
## Crossref customization
crossref:
  lof-title: "Список иллюстраций"
  lot-title: "Список таблиц"
  lol-title: "Листинги"
## Bibliography
bibliography:
  - bib/cite.bib
csl: _resources/csl/gost-r-7-0-5-2008-numeric.csl
## Formats
format:
### Pdf output format
  pdf:
    toc: true
    number-sections: true
    colorlinks: false
    toc-depth: 2
    lof: true # List of figures
    lot: true # List of tables
#### Document
    documentclass: scrreprt
    papersize: a4
    fontsize: 12pt
    linestretch: 1.5
#### Language
    babel-lang: russian
    babel-otherlangs: english
#### Biblatex
    cite-method: biblatex
    biblio-style: gost-numeric
    biblatexoptions:
      - backend=biber
      - langhook=extras
      - autolang=other*
#### Misc options
    csquotes: true
    indent: true
    header-includes: |
      \usepackage{indentfirst}
      \usepackage{float}
      \floatplacement{figure}{H}
      \usepackage[math,RM={Scale=0.94},SS={Scale=0.94},SScon={Scale=0.94},TT={Scale=MatchLowercase,FakeStretch=0.9},DefaultFeatures={Ligatures=Common}]{plex-otf}
### Docx output format
  docx:
    toc: true
    number-sections: true
    toc-depth: 2
---

# Цель работы

Целью данной работы является изучение посредством Wireshark кадров Ethernet, анализ PDU протоколов
транспортного и прикладного уровней стека TCP/IP.

# Задание

1. Изучить возможности команды ipconfig для ОС типа Windows (ifconfig для систем типа Linux).
2. Определить MAC-адрес устройства и его тип.
3. Установить на домашнем устройстве Wireshark.
4. С помощью Wireshark захватить и проанализировать пакеты ARP и ICMP в части кадров канального уровня
5. С помощью Wireshark захватить и проанализировать пакеты HTTP, DNS в части заголовков и информации протоколов TCP, UDP, QUIC.
6. С помощью Wireshark проанализировать handshake протокола TCP.

# Выполнение лабораторной работы

## MAC-адресация

1. С помощью команды ifconfig вывели информацию о текущем сетевом соединении ([рис. @fig-001]):

2. MAC-адреса сетевых интерфейсов на нашем компьютере ([рис. @fig-001]):

- MAC-адрес wlp3s0 - c8:94:02:bd:7a:15

- MAC-адрес enp2s0f0 - 90:2e:16:f7:6c:cc

3. Описание структуры MAC-адресов нашего устройства ([рис. @fig-001]):

- MAC-адрес wlp3s0 - c8:94:02:bd:7a:15:

	+ Структура: c8:94:02 (OUI) | bd:7a:15 (NIC)

	+ Производитель: c8:94:02 — Coby Electronics (уникальный идентификатор организации)

	+ Интерфейс: bd:7a:15 — уникальный серийный номер сетевого контроллера.

	+ Индивидуальный/Групповой: Индивидуальный, так как младший бит первого октета (c8 = 1100 1000) равен 0.

	+ Глобальный/Локальный: Глобально администрируемый, так как второй младший бит первого октета (c8 = 1100 1000) равен 0.

- MAC-адрес enp2s0f0 - 90:2e:16:f7:6c:cc:

	+ Структура: 90:2e:16 (OUI) | f7:6c:cc (NIC)

	+ Производитель: 90:2e:16 — Shenzhen TINNO Mobile Technology (уникальный идентификатор организации)

	+ Интерфейс: f7:6c:cc — уникальный серийный номер сетевого контроллера.

	+ Индивидуальный/Групповой: Индивидуальный, так как младший бит первого октета (90 = 1001 0000) равен 0.

	+ Глобальный/Локальный: Глобально администрируемый, так как второй младший бит первого октета (90 = 1001 0000) равен 0.

![Вывод команды ifconfig](image/лаба3_1.png){#fig-001 width=70%}

## Анализ кадров канального уровня в Wireshark

1. Установили Wireshark и настроили административные права для захвата пакетов ([рис. @fig-002]):

sudo -i 

```apt-get install wireshark```

```apt-get install pcaputils```

```dpkg-reconfigure wireshark-common```

```groupadd wireshark```

```usermod -a -G wireshark eavernikovskaya```

Затем в основном пользователе добавили сея в группу wireshark ```newgrp wireshark```

![Установка и настройка wireshark](image/лаба3_2.png){#fig-002 width=70%}

2. Запустили wireshark. Выбрали активный на нашем устройстве сетевой интерфейс и убедились что начался процесс захвата трафика ([рис. @fig-003])

![Интерфейс wireshark](image/лаба3_3.png){#fig-003 width=70%}
 
3. На устройстве в консоле определили с помощью команды ```route -n``` IP-адрес нашего устройства и шлюз по умолчанию (default gateway) ([рис. @fig-004])

![Определение IP-адреса шлюза](image/лаба3_4.png){#fig-004 width=70%}

4. На устройстве в консоли с помошью команды ```ping 10.139.255.122``` пропинговали шлюз по умолчанию ([рис. @fig-005])

![Пингование шлюза](image/лаба3_5.png){#fig-005 width=70%} 

5. В wireshark остановили захват трафика. И в строке фльтра прописали фильтр ```arp or icmp``` ([рис. @fig-006])

![Фильтр arp or icmp](image/лаба3_6.png){#fig-006 width=70%} 

6. Изучили эхо-запрос и эхо-ответ ICMP в программе Wireshark:

- На панели списка пакетов (верхний раздел) выбрали первый указанный кадр ICMP - эхо-запрос. Изучили информацию на панели сведений о пакете в средней части экрана ([рис. @fig-007]):

	+ Длина кадра - 98 байт 

	+ Тип Ethernet - IPv4

	+ MAC-адрес источника - c8:94:02:bd:7a:15

	+ MAC-адрес шлюза - ba:af:7c:a7:bd:fb
	
![Информация об эхо-запросе](image/лаба3_7.png){#fig-007 width=70%} 
	
- На панели списка пакетов (верхний раздел) выбрали первый указанный кадр ICMP - эхо-запрос. Изучили информацию на панели сведений о пакете в средней части экрана ([рис. @fig-008]):

	+ Длина кадра - 98 байт 

	+ Тип Ethernet - IPv4

	+ MAC-адрес источника - ba:af:7c:a7:bd:fb

	+ MAC-адрес шлюза - c8:94:02:bd:7a:15

![Информация об эхо-ответе](image/лаба3_8.png){#fig-008 width=70%} 

7. Изучили кадры данных протокоа ARP. Изучили данные в полях заголовка Ethernet II ([рис. @fig-009]):

![Информация кадра протокола ARP](image/лаба3_9.png){#fig-009 width=70%} 

8. Начали новый процесс захвата трафика в wireshark. На устройстве в консоле пропинговали известный адрес, ```ping yandex.ru``` ([рис. @fig-010])

![Пингование yandex.ru](image/лаба3_10.png){#fig-010 width=70%} 

9. В Wireshark остановили захваттрафика. Изучили запросы и ответы протоколов ARP и ICMP. Определили MAC-адреса источника и получателя, определили тип MAC-адресов ([рис. @fig-011])

![Изучение трафика между устройством и yandex.ru](image/лаба3_11.png){#fig-011 width=70%} 

Данные эхо-запроса ([рис. @fig-012]): 

- Длина кадра - 98 байт 

- Тип Ethernet - IPv4

- MAC-адрес источника - c8:94:02:bd:7a:15

- MAC-адрес получателя - ba:af:7c:a7:bd:fb

![Эхо-запрос от yandex.ru](image/лаба3_12.png){#fig-012 width=70%} 

Данные эхо-ответа ([рис. @fig-013]): 

- Длина кадра - 98 байт 

- Тип Ethernet - IPv4

- MAC-адрес источника - ba:af:7c:a7:bd:fb

- MAC-адрес получателя - c8:94:02:bd:7a:15

![Эхо-ответ от yandex.ru](image/лаба3_13.png){#fig-013 width=70%} 

## Анализ протоколов транспортного уровня в Wireshark

1. Снова запустили wireshark и выбрали активный на нашем устройстве сетевой интерфейс. Убедились что начался процесс захвата трафика

2. На нашем устройстве в браузере перешли на сайт, работающий по протоколу HTTP (например, на сайт CERN http://info.cern.ch/) ([рис. @fig-014])

![Сайт CERN](image/лаба3_14.png){#fig-014 width=70%} 

3. В Wireshark в строке фильтра указали ```http``` и проанализировалм информацию по протоколу TCP в случае запросов и ответов ([рис. @fig-015])

Кадры по протоколу HTTP уже больше (944,455, 401 и т.д. Кб). В поле MAC-адрес получателя также определён MAC-адрес шлюза

![Фильтрование трафика по протоколу HTTP](image/лаба3_15.png){#fig-015 width=70%}

4. В Wireshark в строке фильтра указали ```dns``` и проанализировалм информацию по протоколу UDP в случае запросов и ответов ([рис. @fig-016])

Кадры меньше чем в HTTP (72, 155, 77 и т.д. Кб). Информация об отправителе и получателе такая же

![Фильтрование трафика по протоколу UDP](image/лаба3_16.png){#fig-016 width=70%}

5. В Wireshark в строке фильтра указали ```quic``` и проанализировалм информацию по протоколу quic в случае запросов и ответов ([рис. @fig-017])

В пакете QUIC задан большой размер кадров

![Фильтрование трафика по протоколу QUIC](image/лаба3_17.png){#fig-017 width=70%}

6. Остановили захват трафика в wireshark

## Анализ handshake протокола TCP в Wireshark

1. Снова запустили wireshark и выбрали активный на нашем устройстве сетевой интерфейс. Убедились что начался процесс захвата трафика

2.  На нашем устройстве соединились о HTTP с сайтом для захвата в wireshark пакетов TCP

3. В Wireshark проанализировали handshake протокола TCP ([рис. @fig-018]):

Для установления соединенися по TCP используется процесс 3-way handshake (трёхстороннее рукопожатие). Происходит обмен тремя пакетами:

- SYN - клиент отправляет пакет с флагом SYN и случайным Sequence Number

- SYN-ACK - сервер отвечает пакетом с флагами SYN+ACK, своим Sequence Number и Ack = client_seq + 1

- ACK - клиент отправляет ACK с Ack = server_seq + 1

![handshake протокола TCP](image/лаба3_18.png){#fig-018 width=70%}

4. В Wireshark в меню «Статистика» выбрали «График Потока» и посмотрели для TCP ([рис. @fig-019])

![График потока TCP пакетов](image/лаба3_19.png){#fig-019 width=70%}

# Выводы

В ходе выполнения лабораторной работы №3 мы изучили посредством Wireshark кадры Ethernet, проанализировали PDU протоколы транспортного и прикладного уровней стека TCP/IP

# Список литературы

1. [Лаборатораня работа №3](https://esystem.rudn.ru/pluginfile.php/2858360/mod_resource/content/3/003-lab_datalink-layer-WSh.pdf)
