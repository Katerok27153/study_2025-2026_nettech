---
# Preamble

## Author
author:
  name: Верниковская Екатерина Андреевна
  degrees: DSc
  email: 11322361366@pfur.ru
  affiliation:
    - name: Российский университет дружбы народов
      country: Российская Федерация
      postal-code: 117198
      city: Москва
      address: ул. Миклухо-Маклая, д. 6

## Title
title: Отчёт по лабораторной работе №1
subtitle: Сетевые технологии
license: CC BY
date: 2025-5-09

## Generic options
lang: ru-RU
crossref:
  lof-title: Список иллюстраций
  lot-title: Список таблиц
  lol-title: Листинги

## Fonts 
mainfont: PT Serif 
romanfont: PT Serif 
sansfont: PT Sans 
monofont: PT Mono 
mainfontoptions: Ligatures=TeX 
romanfontoptions: Ligatures=TeX 
sansfontoptions: Ligatures=TeX,Scale=MatchLowercase 
monofontoptions: Scale=MatchLowercase,Scale=0.9

## Formats
format:
### Pdf output format
  beamer:
    toc: true
    toc-title: Содержание
    number-sections: true
    colorlinks: false
    toc-depth: 2
    slide_level: 2
    aspectratio: 169
    section-titles: true
    theme: metropolis
    themeoptions: progressbar=frametitle,sectionpage=progressbar,numbering=fraction
    pdf-engine: xelatex
    fontenc: T2A
#### Language
    babel-lang: russian
    babel-otherlangs: english

### Html output
  revealjs:
    transition: slide
    margin: 0.2
    smaller: false
    output-ext: html
    theme: beige
    logo: _resources/image/logo_rudn.png
---

# Вводная часть

## Цель работы

Целью данной работы является изучение методов кодирования и модуляции сигналов с помощью высокоуровнего языка программирования Octave. Определение спектра и параметров сигнала. Демонстрация принципов модуляции сигнала на примере аналоговой амплитудной модуляции. Исследование свойства самосинхронизации сигнала.

# Выполнение лабораторной работы

## Построение графиков в Octave

Сначала установили в нашей ОС Octave: ```sudo apt install octave``` ([рис. @fig-001]), ([рис. @fig-002])

![Установка octave](image/лаба1_1.png){#fig-001 width=70%}

## Построение графиков в Octave

![Версия octave](image/лаба1_2.png){#fig-002 width=70%}

## Построение графиков в Octave

Далее запустили в нашей ОС Octave с оконным интерфейсом ([рис. @fig-003])

![Запуск octave](image/лаба1_3.png){#fig-003 width=70%}

## Построение графиков в Octave

Далее перешли в окно редактора. Воспользовавшись комбинацией клавиш ```ctrl + n``` создали новый сценарий. Сохранили его в наш рабочий каталог с именем *plot_sin.m*. В окне редактора написали код по построению графика функции $$ y=sin(x)+\frac{1}{3}sin(3x)+\frac{1}{5}sin(5x) $$ на интервале [−10; 10]. После этого запустили наш сценарий, воспользовавшись клавишей ```f5```. Открылось окно с построенным графиком и в нашем рабочем каталоге появились файлы с графиками в в форматах .eps, .png ([рис. @fig-004]), ([рис. @fig-005])

## Построение графиков в Octave

![Работа программы plot_sin.m](image/лаба1_4.png){#fig-004 width=70%}

## Построение графиков в Octave

![График функции y](image/лаба1_5.png){#fig-005 width=60%}

## Построение графиков в Octave

Далее сохранили сценарий под другим названием *plot_sic_cos.m* и изменили код так чтобы на одном графике располагались отличающиеся по типу линий графики функций $$ y1=sin(x)+\frac{1}{3}sin(3x)+\frac{1}{5}sin(5x) $$ и $$ y2=cos(x)+\frac{1}{3}cos(3x)+\frac{1}{5}cos(5x) $$ на интервале [−10; 10]. И запустили сценарий ([рис. @fig-006]), ([рис. @fig-007])

## Построение графиков в Octave

![Работа программы plot_sin_cos.m](image/лаба1_6.png){#fig-006 width=70%}

## Построение графиков в Octave

![График функций y1 и y2](image/лаба1_7.png){#fig-007 width=60%}

## Разложение импульсного сигнала в частичный ряд Фурье

Далее создали новый сценарий и сохранили его в наш рабочий каталог с именем *meandr.m*. В нём реализовали код для реализации меандра через косинусы. Запустили сценарий и получили график меандра через косинусы ([рис. @fig-008]), ([рис. @fig-009])

## Разложение импульсного сигнала в частичный ряд Фурье

![Работа программы meandr.m (1)](image/лаба1_8.png){#fig-008 width=70%}

## Разложение импульсного сигнала в частичный ряд Фурье

![Графики меандра, содержащего различное число гармоник (через косинусы)](image/лаба1_9.png){#fig-009 width=60%}

## Разложение импульсного сигнала в частичный ряд Фурье

Далее скорректировали код для реализации меандра через синусы. Запустили сценарий и получили график меандра через синусы ([рис. @fig-010]), ([рис. @fig-011])

## Разложение импульсного сигнала в частичный ряд Фурье

![Работа программы meandr.m (2)](image/лаба1_10.png){#fig-010 width=60%}

## Разложение импульсного сигнала в частичный ряд Фурье

![Графики меандра, содержащего различное число гармоник (через синусы)](image/лаба1_11.png){#fig-011 width=60%}

## Определение спектра и параметров сигнала

В нашем рабочем каталоге создали каталог *spectre1* и в нём новый сценарий с именем, *spectre.m*. Далее написали код для построения графика двух синусоидальных сигнала разной частоты. Зпустили сценарий и получили график сигналов ([рис. @fig-012]), ([рис. @fig-013])

## Определение спектра и параметров сигнала

![Работа программы spectre.m (1)](image/лаба1_12.png){#fig-012 width=70%}

## Определение спектра и параметров сигнала

![Два синусоидальных сигнала разной частоты](image/лаба1_13.png){#fig-013 width=60%}

## Определение спектра и параметров сигнала

Далее с помощью быстрого преобразования Фурье нашли спектры сигналов. Для этого добавили в файл *spectre.m* добавили код. Запустили сценарий и получили график спектров ([рис. @fig-014]), ([рис. @fig-015])

## Определение спектра и параметров сигнала

![Работа программы spectre.m (2)](image/лаба1_14.png){#fig-014 width=70%}

## Определение спектра и параметров сигнала
 
![График спектров синусоидальных сигналов](image/лаба1_15.png){#fig-015 width=60%}

## Определение спектра и параметров сигнала

Учитывая реализацию преобразования Фурье, скорректировали график спектра: отбросили дублирующие отрицательные частоты, а также приняли в расчёт то, что на каждом шаге вычисления быстрого преобразования Фурье происходит суммирование амплитуд сигналов. Для этого добавили в файл *spectre.m* добавили код. Запустили сценарий и получили исправленный графк спекторов ([рис. @fig-016]), ([рис. @fig-017])

## Определение спектра и параметров сигнала

![Работа программы spectre.m (2)](image/лаба1_16.png){#fig-016 width=70%}

## Определение спектра и параметров сигнала

![Исправленный график спектров синусоидальных сигналов](image/лаба1_17.png){#fig-017 width=60%}

## Определение спектра и параметров сигнала

Далее нашли спектр суммы расмотренных сигналов, создав каталог *spectr_sum* и файл в нём *spectre_sum.m* с кодом. Запустили сценарий и получили нужные графики ([рис. @fig-018]), ([рис. @fig-019]), ([рис.@fig-020]), ([рис. @fig-021])

![Работа программы spectre_sum.m (1)](image/лаба1_18.png){#fig-018 width=70%}

## Определение спектра и параметров сигнала

![Суммарный сигнал](image/лаба1_19.png){#fig-019 width=60%}

## Определение спектра и параметров сигнала

![Работа программы spectre_sum.m (2)](image/лаба1_20.png){#fig-020 width=70%}

## Определение спектра и параметров сигнала

![Спектр суммарного сигнала](image/лаба1_21.png){#fig-021 width=60%}

## Амплитудная модуляция

В нашем рабочем каталоге создали каталог *modulation* и в нём новый сценарий с именем *am.m*. В нём прописали код. Запустили и получили нужные нам графики ([рис. @fig-022]), ([рис. @fig-023]), ([рис. @fig-024]), ([рис. @fig-025])

## Амплитудная модуляция

![Работа программы am.m (1)](image/лаба1_22.png){#fig-022 width=70%}

## Амплитудная модуляция

![Сигнал и огибающая при амплитудной модуляции](image/лаба1_23.png){#fig-023 width=60%}

## Амплитудная модуляция

![Работа программы am.m (2)](image/лаба1_24.png){#fig-024 width=70%}

## Амплитудная модуляция

![Спектр сигнала при амплитудной модуляции](image/лаба1_25.png){#fig-025 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

В окне интерпретатора команд проверили, установлен ли у нас пакет расширений signal: ```>> pkg list``` ([рис. @fig-026])

![Пакет расширений signal](image/лаба1_26.png){#fig-026 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

В нашем рабочем каталоге создали каталог *coding* и в нём файлы *main.m*, *maptowave.m*, *unipolar.m*, *ami.m*, *bipolarnrz.m*, *bipolarrz.m*, *manchester.m*, *diffmanc.m*, *calcspectre.m* ([рис. @fig-027])

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Структура каталога](image/лаба1_27.png){#fig-027 width=50%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

В файле *main.m* подключили пакет signal, задали входные кодовые последовательности, прописали вызовы функций для построения графиков модуляций кодированных сигналов для кодовой последовательности data, прописали вызовы функций для построения графиков модуляций кодированных сигналов для кодовой последовательности data_sync и прописали вызовы функций для построения графиков спектров ([рис. @fig-028])

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Файл main.m](image/лаба1_28.png){#fig-028 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Далее в файле *maptowave.m* прописали функцию, которая по входному битовому потоку строит график сигнала ([рис. @fig-029])

![Файл maptowave.m](image/лаба1_29.png){#fig-029 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

В файлах *unipolar.m*, *ami.m*, *bipolarnrz.m*, *bipolarrz.m*, *manchester.m*, *diffmanc.m* прописали соответствующие функции преобразования кодовой последовательности data с вызовом функции maptowave для построения соответствующего графика

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Униполярное кодирование ([рис. @fig-030])

![Файл unipolar.m, Униполярное кодирование](image/лаба1_30.png){#fig-030 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Кодирование AMI ([рис. @fig-031])

![Файл ami.m, Кодирование AMI](image/лаба1_31.png){#fig-031 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Кодирование NRZ ([рис. @fig-032])

![Файл bipolarnrz.m, Кодирование NRZ](image/лаба1_32.png){#fig-032 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Кодирование RZ ([рис. @fig-033])

![Файл bipolarrz.m, Кодирование RZ](image/лаба1_33.png){#fig-033 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Манчестерское кодирование ([рис. @fig-034])

![Файл manchester.m, Манчестерское кодирование](image/лаба1_34.png){#fig-034 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Дифференциальное манчестерское кодирование ([рис. @fig-035])

![Файл diffmanc.m, Дифференциальное манчестерское кодировани](image/лаба1_35.png){#fig-035 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

В файле calcspectre.m прописали функцию построения спектра сигнала ([рис. @fig-036])

![Файл calcspectre.m](image/лаба1_36.png){#fig-036 width=50%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Запустили главный скрипт main.m. В каталоге *signal* бфли получены файлы с графиками кодированного сигнала (рис. 3.40-3.45), в каталоге *sync* — файлы с графиками, иллюстрирующими свойства самосинхронизации (рис. 3.46–3.51), в каталоге *spectre* — файлы с графиками спектров сигналов (рис. 3.52–3.57) ([рис. @fig-037]), ([рис. @fig-038]), ([рис. @fig-039])

![Каталог signal](image/лаба1_37.png){#fig-037 width=50%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Каталог sync](image/лаба1_38.png){#fig-038 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Каталог spectre](image/лаба1_39.png){#fig-039 width=70%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

Полученные графики ([рис. @fig-040]), ([рис. @fig-041]), ([рис. @fig-042]), ([рис. @fig-043]), ([рис. @fig-044]), ([рис. @fig-045]), ([рис. @fig-046]), ([рис. @fig-047]), ([рис. @fig-048]), ([рис. @fig-049]), ([рис. @fig-050]), ([рис. @fig-051]), ([рис. @fig-052]), ([рис. @fig-053]), ([рис. @fig-054]), ([рис. @fig-055]), ([рис. @fig-056]), ([рис. @fig-057])

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Униполярное кодирование](image/лаба1_40.png){#fig-040 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование AMI](image/лаба1_41.png){#fig-041 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование NRZ](image/лаба1_42.png){#fig-042 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование RZ](image/лаба1_43.png){#fig-043 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Манчестерское кодирование](image/лаба1_44.png){#fig-044 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Дифференциальное манчестерское кодирование](image/лаба1_45.png){#fig-045 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Униполярное кодирование: нет самосинхронизации](image/лаба1_46.png){#fig-046 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование AMI: самосинхронизация при наличии сигнала](image/лаба1_47.png){#fig-047 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование NRZ: нет самосинхронизации](image/лаба1_48.png){#fig-048 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование RZ: есть самосинхронизация](image/лаба1_49.png){#fig-049 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Манчестерское кодирование: есть самосинхронизация](image/лаба1_50.png){#fig-050 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Дифференциальное манчестерское кодирование: есть самосинхронизация](image/лаба1_51.png){#fig-051 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Униполярное кодирование: спектр сигнала](image/лаба1_52.png){#fig-052 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование AMI: спектр сигнала](image/лаба1_53.png){#fig-053 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование NRZ: спектр сигнала](image/лаба1_54.png){#fig-054 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Кодирование RZ: спектр сигнала](image/лаба1_55.png){#fig-055 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Манчестерское кодирование: спектр сигнала](image/лаба1_56.png){#fig-056 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

![Дифференциальное манчестерское кодирование: спектр сигнала](image/лаба1_57.png){#fig-057 width=60%}

## Кодирование сигнала. Исследование свойства самосинхронизации сигнала

# Подведение итогов

## Выводы

В ходе выполнения лабораторной работы №1 мы изучили методы кодирования и модуляции сигналов с помощью высокоуровнего языка программирования Octave. Определили спектр и параметры сигнала. Продемонстрировали принципы модуляции сигнала на примере аналоговой амплитудной модуляции. Исследовали свойства самосинхронизации сигнала.

## Список литературы

1. [Лаборатораня работа №1](https://esystem.rudn.ru/pluginfile.php/2858347/mod_resource/content/3/001-lab_cod-mod-2.pdf)
